1.Projeto Lógico

Resumo
O modelo escolhido tem como objetivo controlar a realização de compra de um pedido
em um E-commerce organizando esse processo por cliente, pedido, os itens presentes
no pedido : impedido, os produtos disponíveis: produto, o pagamento e o histórico de
compra do cliente.

3. Estrutura
3.1. Criar tablespace de Dados;
   
CREATE TABLESPACE TBS_PROJETO
DATAFILE 'TBS_PROJETO.dbf' SIZE 100M
AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED; 

3.2. Criar um profile com pelo menos 5 restrições;

CREATE PROFILE PROFILE_PROJETO LIMIT
SESSIONS_PER_USER 2
CPU_PER_CALL 60000
IDLE_TIME 15
FAILED_LOGIN_ATTEMPTS 3
PASSWORD_LOCK_TIME 1; 

3.3. Criar uma role com pelo menos 5 permissões;

CREATE ROLE ROLE_PROJETO;
GRANT CREATE ANY TABLE, CREATE TRIGGER, CREATE ANY VIEW TO
USUARIO_PROJETO;
GRANT SELECT ANY TABLE TO USUARIO_PROJETO;
GRANT INSERT ANY TABLE TO USUARIO_PROJETO;
GRANT UPDATE ANY TABLE TO USUARIO_PROJETO;
GRANT DELETE ANY TABLE TO USUARIO_PROJETO;

3.4. Criar um usuário ;
3.4.1. Atribua ao usuário a tablespace de Dados bem como a role e a profile
criadas;

CREATE USER USUARIO_PROJETO
IDENTIFIED BY SENHA_PROJETO
DEFAULT TABLESPACE TBS_PROJETO
PROFILE PROFILE_PROJETO
ACCOUNT UNLOCK; 

3.5. Crie o script de criação de pelo menos 5 tabelas com suas chaves primárias e
chaves estrangeiras e seus respectivos relacionamentos;
3.5.1. Pelo menos uma das tabelas deve ter uma chave única (chave alternativa)
além da chave primária;

CREATE TABLE PRODUTO (
ID_PRODUTO NUMBER(10,0) NOT NULL,
NOME_PRODUTO VARCHAR2(50 CHAR) NOT NULL,
DESCRICAO_PRODUTO VARCHAR2(200 CHAR),
PRECO NUMBER(15,2) NOT NULL,
ESTOQUE NUMBER(10,0) NOT NULL,
CODIGO_DE_BARRA NUMBER(10,0) NOT NULL,
CONSTRAINT PK_PRODUTO PRIMARY KEY (ID_PRODUTO),
CONSTRAINT UK_PRODUTO UNIQUE (CODIGO_DE_BARRA)
);

CREATE TABLE CLIENTE (
ID_CLIENTE NUMBER(10,0) NOT NULL,
NOME_CLIENTE VARCHAR2(50) NOT NULL,
IDADE_CLIENTE NUMBER(10,0) NOT NULL,
EMAIL_CLIENTE VARCHAR2(50) NOT NULL,
CONSTRAINT PK_CLIENTE PRIMARY KEY (ID_CLIENTE)
); 

CREATE TABLE PEDIDO (
ID_PEDIDO NUMBER(10,0) NOT NULL,
DATA_PEDIDO DATE NOT NULL,
STATUS_PEDIDO VARCHAR2(50) NOT NULL,
ID_CLIENTE NUMBER(10,0) NOT NULL,
CONSTRAINT PK_PEDIDO PRIMARY KEY (ID_PEDIDO),
CONSTRAINT FK_PEDIDO FOREIGN KEY (ID_CLIENTE) REFERENCES
CLIENTE(ID_CLIENTE)
); 

UCL-Faculdade do Centro Leste
CREATE TABLE PAGAMENTO (
ID_PAGAMENTO NUMBER(10,0) NOT NULL,
METODO_DE_PAGAMENTO VARCHAR2(50) NOT NULL,
VALOR_PAGAMENTO NUMBER(15,2) NOT NULL,
ID_PEDIDO NUMBER(10,2) NOT NULL,
CONSTRAINT PK_PAGAMENTO PRIMARY KEY (ID_PAGAMENTO),
CONSTRAINT FK_PAGAMENTO FOREIGN KEY (ID_PEDIDO) REFERENCES
PEDIDO(ID_PEDIDO)
);

CREATE TABLE ITEM_PEDIDO (
ID_ITEM_PEDIDO NUMBER(10,0) NOT NULL,
QUANTIDADE NUMBER(10,0) NOT NULL,
SUB_TOTAL NUMBER(15,2) NOT NULL,
ID_PEDIDO NUMBER(10,0) NOT NULL,
ID_PRODUTO NUMBER(10,0) NOT NULL,
CONSTRAINT PK_ITEM_PEDIDO PRIMARY KEY (ID_ITEM_PEDIDO),
CONSTRAINT FK1_ITEM_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES
PEDIDO(ID_PEDIDO),
CONSTRAINT FK2_ITEM_PEDIDO FOREIGN KEY (ID_PRODUTO) REFERENCES
PRODUTO(ID_PRODUTO)
);

CREATE TABLE HISTORICO_CLIENTE (
ID_HISTORICO NUMBER(10,0) NOT NULL,
DATA_COMPRA DATE NOT NULL,
STATUS_COMPRA VARCHAR2(50) NOT NULL,
ID_CLIENTE NUMBER(10,0) NOT NULL,
CONSTRAINT PK_HISTORICO PRIMARY KEY (ID_HISTORICO),
CONSTRAINT FK_HISTORICO FOREIGN KEY (ID_CLIENTE) REFERENCES
CLIENTE(ID_CLIENTE)

4. Manipulação de Dados
4.1. Crie um script para inserir pelo menos 5 registros em cada entidade;
   
INSERT INTO
PRODUTO(ID_PRODUTO,NOME_PRODUTO,DESCRICAO_PRODUTO,PRECO,ESTOQUE,CODIGO_DE_BARR
A)
VALUES
(1,'TÊNIS','TÊNIS PRETO CASUAL DE COURO',350.00,100,0000001);
INSERT INTO
PRODUTO(ID_PRODUTO,NOME_PRODUTO,DESCRICAO_PRODUTO,PRECO,ESTOQUE,CODIGO_DE_BARR
A)
VALUES
(2,'CALÇA CARGO','CALÇA BEGE FEITA COM TECIDO DE SARJA COM
ELASTÃNO',300.00,30,0000002);
INSERT INTO
PRODUTO(ID_PRODUTO,NOME_PRODUTO,DESCRICAO_PRODUTO,PRECO,ESTOQUE,CODIGO_DE_BARR
A)
VALUES
(3,'CAMISETA REGATA','CAMISETA REGATA BRANCA FEITA COM 100% DE
ALGODÃO',100.00,150,0000003);
INSERT INTO
PRODUTO(ID_PRODUTO,NOME_PRODUTO,DESCRICAO_PRODUTO,PRECO,ESTOQUE,CODIGO_DE_BARR
A)
VALUES
(4,'CAMISETA SLIM','CAMISETA DE MANGA CURTA PRETA FEITA COM 100% DE
ALGODÃO',150.00,150,0000004);
INSERT INTO
PRODUTO(ID_PRODUTO,NOME_PRODUTO,DESCRICAO_PRODUTO,PRECO,ESTOQUE,CODIGO_DE_BARR
A)
VALUES
(5,'MOLETOM','MOLETOM PRETO 100% ALGODÃO FABRICADA PELA
NIKE',300.00,50,0000005);
INSERT INTO
PRODUTO(ID_PRODUTO,NOME_PRODUTO,DESCRICAO_PRODUTO,PRECO,ESTOQUE,CODIGO_DE_BARR
A)
VALUES
(6,'CAMISA','CAMISA DE BOTÃO FLORIDA',150.00,20,0000006);

INSERT INTO CLIENTE(ID_CLIENTE,NOME_CLIENTE,IDADE_CLIENTE,EMAIL_CLIENTE)
VALUES
(1,'MARIA',18,'maria@gmail.com');
INSERT INTO CLIENTE(ID_CLIENTE,NOME_CLIENTE,IDADE_CLIENTE,EMAIL_CLIENTE)
VALUES
(2,'JOÃO',20,'joao@gmail.com');
INSERT INTO CLIENTE(ID_CLIENTE,NOME_CLIENTE,IDADE_CLIENTE,EMAIL_CLIENTE)
UCL-Faculdade do Centro Leste
VALUES
(3,'JOSE',35,'jose@gmail.com');
INSERT INTO CLIENTE(ID_CLIENTE,NOME_CLIENTE,IDADE_CLIENTE,EMAIL_CLIENTE)
VALUES
(4,'FELIPE',45,'felipe@gmail.com');
INSERT INTO CLIENTE(ID_CLIENTE,NOME_CLIENTE,IDADE_CLIENTE,EMAIL_CLIENTE)
VALUES
(5,'NATÃ',40,'nata@gmail.com');
INSERT INTO CLIENTE(ID_CLIENTE,NOME_CLIENTE,IDADE_CLIENTE,EMAIL_CLIENTE)
VALUES
(6,'HENRIQUE',30,'henrique@gmail.com');

INSERT INTO PEDIDO(ID_PEDIDO,DATA_PEDIDO,STATUS_PEDIDO,ID_CLIENTE)
VALUES
(1,TO_DATE('2023-04-24', 'YYYY-MM-DD'),'EM ANDAMENTO',1);
INSERT INTO PEDIDO(ID_PEDIDO,DATA_PEDIDO,STATUS_PEDIDO,ID_CLIENTE)
VALUES
(2,TO_DATE('2023-06-17', 'YYYY-MM-DD'),'EM ANDAMENTO',2);
INSERT INTO PEDIDO(ID_PEDIDO,DATA_PEDIDO,STATUS_PEDIDO,ID_CLIENTE)
VALUES
(3,TO_DATE('2023-01-22', 'YYYY-MM-DD'),'CONCLUIDO',3);
INSERT INTO PEDIDO(ID_PEDIDO,DATA_PEDIDO,STATUS_PEDIDO,ID_CLIENTE)
VALUES
(4,TO_DATE('2023-05-10', 'YYYY-MM-DD'),'CONCLUIDO',4);
INSERT INTO PEDIDO(ID_PEDIDO,DATA_PEDIDO,STATUS_PEDIDO,ID_CLIENTE)
VALUES
(5,TO_DATE('2023-11-25', 'YYYY-MM-DD'),'EM ANDAMENTO',5);
INSERT INTO PEDIDO(ID_PEDIDO,DATA_PEDIDO,STATUS_PEDIDO,ID_CLIENTE)
VALUES
(6,TO_DATE('2023-11-26', 'YYYY-MM-DD'),'CONCLUIDO',6);

INSERT INTO
ITEM_PEDIDO(ID_ITEM_PEDIDO,QUANTIDADE,SUB_TOTAL,ID_PEDIDO,ID_PRODUTO)
VALUES
(1,1,350.00,1,1);
INSERT INTO
ITEM_PEDIDO(ID_ITEM_PEDIDO,QUANTIDADE,SUB_TOTAL,ID_PEDIDO,ID_PRODUTO)
VALUES
(2,1,300.00,2,2);
INSERT INTO
ITEM_PEDIDO(ID_ITEM_PEDIDO,QUANTIDADE,SUB_TOTAL,ID_PEDIDO,ID_PRODUTO)
VALUES
(3,1,100.00,3,3);
INSERT INTO
ITEM_PEDIDO(ID_ITEM_PEDIDO,QUANTIDADE,SUB_TOTAL,ID_PEDIDO,ID_PRODUTO)
VALUES
(4,1,150.00,4,4);
INSERT INTO
ITEM_PEDIDO(ID_ITEM_PEDIDO,QUANTIDADE,SUB_TOTAL,ID_PEDIDO,ID_PRODUTO)
VALUES
(5,1,300.00,5,5);
INSERT INTO
ITEM_PEDIDO(ID_ITEM_PEDIDO,QUANTIDADE,SUB_TOTAL,ID_PEDIDO,ID_PRODUTO)
VALUES
(6,1,300.00,6,5); 

INSERT INTO
PAGAMENTO(ID_PAGAMENTO,METODO_DE_PAGAMENTO,VALOR_PAGAMENTO,ID_PEDIDO)
VALUES
(1,'CARTÃO',350.00,1);
INSERT INTO
PAGAMENTO(ID_PAGAMENTO,METODO_DE_PAGAMENTO,VALOR_PAGAMENTO,ID_PEDIDO)
VALUES
(2,'DINHEIRO',300.00,2);
INSERT INTO
PAGAMENTO(ID_PAGAMENTO,METODO_DE_PAGAMENTO,VALOR_PAGAMENTO,ID_PEDIDO)
VALUES
(3,'DINHEIRO',100.00,3);
INSERT INTO
PAGAMENTO(ID_PAGAMENTO,METODO_DE_PAGAMENTO,VALOR_PAGAMENTO,ID_PEDIDO)
VALUES
(4,'DINHEIRO',150.00,4);
INSERT INTO
PAGAMENTO(ID_PAGAMENTO,METODO_DE_PAGAMENTO,VALOR_PAGAMENTO,ID_PEDIDO)
VALUES
(5,'CARTÃO',300.00,5);
INSERT INTO
PAGAMENTO(ID_PAGAMENTO,METODO_DE_PAGAMENTO,VALOR_PAGAMENTO,ID_PEDIDO)
VALUES
(6,'DINHEIRO',300.00,6);

INSERT INTO
HISTORICO_CLIENTE(ID_HISTORICO,DATA_COMPRA,STATUS_COMPRA,ID_CLIENTE)
VALUES
(1,TO_DATE('2023-04-24', 'YYYY-MM-DD'),'EM ANDAMENTO',1);
INSERT INTO
HISTORICO_CLIENTE(ID_HISTORICO,DATA_COMPRA,STATUS_COMPRA,ID_CLIENTE)
VALUES
(2,TO_DATE('2023-06-17', 'YYYY-MM-DD'),'EM ANDAMENTO',2);
INSERT INTO
HISTORICO_CLIENTE(ID_HISTORICO,DATA_COMPRA,STATUS_COMPRA,ID_CLIENTE)
VALUES
(3,TO_DATE('2023-01-22', 'YYYY-MM-DD'),'CONCLUIDO',3);
INSERT INTO
HISTORICO_CLIENTE(ID_HISTORICO,DATA_COMPRA,STATUS_COMPRA,ID_CLIENTE)
VALUES
(4,TO_DATE('2023-05-10', 'YYYY-MM-DD'),'CONCLUIDO',4);
INSERT INTO
HISTORICO_CLIENTE(ID_HISTORICO,DATA_COMPRA,STATUS_COMPRA,ID_CLIENTE)
VALUES
(5,TO_DATE('2023-11-25', 'YYYY-MM-DD'),'EM ANDAMENTO',5);


4.2. Crie uma instrução para excluir registros em uma tabela utilizando uma restrição
com “LIKE”;

DELETE FROM PRODUTO
WHERE NOME_PRODUTO LIKE 'CAMISA';
--<FEITO> <TESTADO>--
4.3. Crie uma instrução para alterar:
4.3.1. Apenas 1 registro em uma tabela;
UPDATE CLIENTE
SET EMAIL_CLIENTE = 'natadiassanto@ucl.br'
WHERE ID_CLIENTE = 5;

4.3.2. Todos os registros de uma tabela recalculando alguma coluna;

UPDATE (
SELECT I.SUB_TOTAL, I.QUANTIDADE, P.PRECO
FROM ITEM_PEDIDO I
JOIN PRODUTO P ON I.ID_PRODUTO = P.ID_PRODUTO
) T
SET T.SUB_TOTAL = T.QUANTIDADE * T.PRECO; 

5. Consultas
5.1. Crie os seguintes JOINS:
5.1.1. NATURAL JOIN com 2 entidades;
   
SELECT ID_CLIENTE
FROM CLIENTE
NATURAL JOIN PEDIDO;
-–<FEITO> <TESTADO>--
INSERT INTO
HISTORICO_CLIENTE(ID_HISTORICO,DATA_COMPRA,STATUS_COMPRA,ID_CLIENTE)
VALUES
(6,TO_DATE('2023-11-26', 'YYYY-MM-DD'),'CONCLUIDO',6);

5.1.2. JOIN ON usando pelo menos 3 entidades;
5.1.2.1. A consulta deve ter pelo menos um atributo do tipo data que deve
ser impresso no formato: dia, mês por extenso, ano com quatro
dígitos;

SELECT C.NOME_CLIENTE , TO_CHAR(P.DATA_PEDIDO, 'DD, MONTH YYYY') AS
DATA_FORMATADA, PG.METODO_DE_PAGAMENTO
FROM CLIENTE C
JOIN
PEDIDO P ON C.ID_CLIENTE = P.ID_CLIENTE
JOIN
PAGAMENTO PG ON P.ID_PEDIDO = PG.ID_PEDIDO; 

5.1.2.2. JOIN USING usando pelo menos 4 entidades;
5.1.2.2.1. Use as funções de linha: LOWER, UPPER e Initicap;

SELECT
ID_CLIENTE,
INITCAP(LOWER(NOME_CLIENTE)) AS NOME_FORMATADO,
UPPER(STATUS_PEDIDO) AS STATUS_PEDIDO,
INITCAP(NOME_PRODUTO) AS NOME_PRODUTO_FORMATADO,
VALOR_PAGAMENTO
FROM
CLIENTE
JOIN
PEDIDO USING (ID_CLIENTE)
JOIN
ITEM_PEDIDO USING (ID_PEDIDO)
JOIN
PRODUTO USING (ID_PRODUTO)
JOIN
PAGAMENTO USING (ID_PEDIDO);

5.1.2.3. Equijunção usando pelo menos 5 entidades;

SELECT C.NOME_CLIENTE,
P.DATA_PEDIDO,
PG.METODO_DE_PAGAMENTO,
PD.NOME_PRODUTO,
IP.QUANTIDADE
FROM
CLIENTE C
JOIN
PEDIDO P ON C.ID_CLIENTE = P.ID_CLIENTE
JOIN
UCL-Faculdade do Centro Leste
PAGAMENTO PG ON P.ID_PEDIDO = PG.ID_PEDIDO
JOIN
ITEM_PEDIDO IP ON P.ID_PEDIDO = IP.ID_PEDIDO
JOIN
PRODUTO PD ON IP.ID_PRODUTO = PD.ID_PRODUTO;

5.1.3. Crie 2 instruções realizando alguma cláusula JOIN (a sua escolha)
utilizando funções de agregação;

SELECT
C.ID_CLIENTE,
C.NOME_CLIENTE,
COUNT(P.ID_PEDIDO) AS TOTAL_PEDIDOS
FROM
CLIENTE C
LEFT JOIN
PEDIDO P ON C.ID_CLIENTE = P.ID_CLIENTE
GROUP BY
C.ID_CLIENTE, C.NOME_CLIENTE; --<FEITO> <TESTADO>--
SELECT
C.ID_CLIENTE,
C.NOME_CLIENTE,
SUM(PG.VALOR_PAGAMENTO) AS TOTAL_GASTO
FROM
CLIENTE C
LEFT JOIN
PEDIDO P ON C.ID_CLIENTE = P.ID_CLIENTE
LEFT JOIN
PAGAMENTO PG ON P.ID_PEDIDO = PG.ID_PEDIDO
GROUP BY
C.ID_CLIENTE, C.NOME_CLIENTE; 

5.1.4. Em uma das instruções realizadas no item anterior utilize o having;

SELECT
C.ID_CLIENTE,
C.NOME_CLIENTE,
SUM(PG.VALOR_PAGAMENTO) AS TOTAL_GASTO
FROM

CLIENTE C
LEFT JOIN
PEDIDO P ON C.ID_CLIENTE = P.ID_CLIENTE
LEFT JOIN
PAGAMENTO PG ON P.ID_PEDIDO = PG.ID_PEDIDO
GROUP BY
C.ID_CLIENTE, C.NOME_CLIENTE
HAVING
SUM(PG.VALOR_PAGAMENTO) > 300; 

5.2. Crie uma instrução usando o Case. A instrução deve fazer sentido para o esquema;

SELECT
ID_PRODUTO,
NOME_PRODUTO,
ESTOQUE,
CASE
WHEN ESTOQUE > 0 THEN 'Em estoque'
WHEN ESTOQUE = 0 THEN 'Sem estoque'
WHEN ESTOQUE < 0 THEN 'Erro no controle de estoque'
ELSE 'Status desconhecido'
END AS NOVO_STATUS_ESTOQUE
FROM
PRODUTO;

6. Modularização
6.1. Crie um bloco anônimo que execute a seguinte sequência:
6.1.1. Faça operação de atualização dos dados de uma tabela;
6.1.2. Faça essa alteração ser persistida no banco;
6.1.3. Crie mais 2 registros na tabela que foi atualizada;
6.1.4. Crie uma marca (ou ponto de restauração) após a instrução anterior;
6.1.5. Crie mais 1 registro na mesma tabela;
6.1.6. Exclua os dois registros criados no passo 6.1.3;
6.1.7. Desfaça as operações realizadas nos passos 6.1.5 e 6.1.6;
6.1.8. Persista as operações pendentes;

DECLARE
V_PRODUTO_ID NUMBER := 1;
V_QUANTIDADE_A_REDUZIR NUMBER := 1;
BEGIN
UPDATE PRODUTO
SET ESTOQUE = ESTOQUE - V_QUANTIDADE_A_REDUZIR
WHERE ID_PRODUTO = V_PRODUTO_ID;
COMMIT;
INSERT INTO PRODUTO (ID_PRODUTO, ESTOQUE) VALUES (2, 10);
INSERT INTO PRODUTO (ID_PRODUTO, ESTOQUE) VALUES (3, 15);
SAVEPOINT PONTO_PARA_RESTAURACAO;
INSERT INTO PRODUTO (ID_PRODUTO, ESTOQUE) VALUES (4, 20);
DELETE FROM PRODUTO WHERE ID_PRODUTO IN (2, 3);
ROLLBACK TO PONTO_PARA_RESTAURACAO;
COMMIT;
DBMS_OUTPUT.PUT_LINE('Operações concluídas com sucesso!');
UCL-Faculdade do Centro Leste
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('OCORREU UM ERRO: ' || SQLERRM);
ROLLBACK;
END;


6.2. Crie um bloco anônimo que utilize um cursor;
6.2.1. Utilize o cursor para inserir, atualizar ou excluir registros de uma tabela ou
ainda para exibir uma lista dos registros na tela (DBMS_OUTPUT);

DECLARE
CURSOR C_PRODUTOS IS
SELECT
ID_PRODUTO,
NOME_PRODUTO,
ESTOQUE
FROM
PRODUTO;
NOVO_VALOR NUMBER;
BEGIN
FOR PRODUTO_REC IN C_PRODUTOS LOOP
DBMS_OUTPUT.PUT_LINE('ID_PRODUTO: ' || PRODUTO_REC.ID_PRODUTO || ',
NOME_PRODUTO: ' || PRODUTO_REC.NOME_PRODUTO || ', ESTOQUE: ' ||
PRODUTO_REC.ESTOQUE);
NOVO_VALOR := 100;
UPDATE PRODUTO
SET ESTOQUE = NOVO_VALOR
WHERE ID_PRODUTO = PRODUTO_REC.ID_PRODUTO;
END LOOP;
COMMIT;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('OCORREU UM ERRO: ' || SQLERRM);
ROLLBACK;
END;

UCL-Faculdade do Centro Leste
6.3. Crie uma função que possa ser utilizada no projeto de BD desse projeto;

CREATE OR REPLACE FUNCTION OBTER_STATUS_PRODUTO(P_ID_PRODUTO NUMBER)
RETURN VARCHAR2
IS
V_STATUS VARCHAR2(50);
BEGIN
SELECT
CASE
WHEN ESTOQUE > 0 THEN 'EM ESTOQUE'
WHEN ESTOQUE = 0 THEN 'SEM ESTOQUE'
WHEN ESTOQUE < 0 THEN 'ERRO NO CONTROLE DE ESTOQUE'
ELSE 'STATUS DESCONHECIDO'
END
INTO V_STATUS
FROM
PRODUTO
WHERE
ID_PRODUTO = P_ID_PRODUTO;
RETURN V_STATUS;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'PRODUTO NÃO ENCONTRADO';
WHEN OTHERS THEN
RETURN 'ERRO AO OBTER STATUS DO PRODUTO: ' || SQLERRM;
END;

UCL-Faculdade do Centro Leste
6.4. Crie uma procedure que possa ser utilizada no projeto de BD desse projeto;

CREATE OR REPLACE PROCEDURE ATUALIZAR_ESTOQUE_PRODUTO(
P_ID_PRODUTO NUMBER,
P_QUANTIDADE NUMBER
)
IS
BEGIN
UPDATE PRODUTO
SET ESTOQUE = ESTOQUE + P_QUANTIDADE
WHERE ID_PRODUTO = P_ID_PRODUTO;
COMMIT;
DBMS_OUTPUT.PUT_LINE('ESTOQUE DO PRODUTO ATUALIZADO COM SUCESSO.');
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('PRODUTO NÃO ENCONTRADO.');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('OCORREU UM ERRO: ' || SQLERRM);
ROLLBACK;
END;

6.5. Crie uma trigger que possa ser utilizada no projeto de BD desse projeto e a associe
a uma tabela origem;
6.5.1. Essa trigger deve gravar os dados alterados e deletados na tabela origem
em uma tabela de auditoria;

AUDIT DELETE, UPDATE ON PRODUTO;
CREATE OR REPLACE TRIGGER TRG_AUDITORIA_PRODUTO
AFTER DELETE OR UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
IF DELETING THEN
EXECUTE IMMEDIATE 'AUDIT DELETE ON PRODUTO BY SESSION';
ELSIF UPDATING THEN
EXECUTE IMMEDIATE 'AUDIT UPDATE ON PRODUTO BY SESSION';
END IF;
END;
